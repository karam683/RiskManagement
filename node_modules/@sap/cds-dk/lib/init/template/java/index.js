const os = require('os');
const path = require('path');

const {fse} = require('@sap/cds-foss');


const commandUtil = require('../../util/commandUtil');
const mvnArchetypeUtil = require('../../util/mvnArchetypeUtil');
const term = require('../../../util/term');

const TemplateBase = require('../templateBase');
const { URLS, OPTION_JAVA, OPTION_NODEJS, OPTION_MTX } = require('../../constants');
const { nullLogger } = require('../../util/logger');


module.exports = class JavaTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    async checkEnabled() {
        if (this.options.add.has(OPTION_NODEJS)) {
            throw new Error(`Only one runtime per project is supported. Specify either ${OPTION_JAVA} or ${OPTION_NODEJS}.`);
        }

        if (this.options.add.has(OPTION_MTX)) {
            throw new Error(`The '${OPTION_MTX}' option can only be used for Node.js projects as of yet.`);
        }

        return true;
    }

    async run() {
        const mvnCmdArgs = mvnArchetypeUtil.getGenerateCmdArgs(this.projectName, this.options, this.logger);

        const tempFolder = await fse.mkdtemp(path.join(os.tmpdir(), `${this.projectName}_`));
        try {
            await commandUtil.spawnCommand('mvn', mvnCmdArgs.cmdLine, {
                cwd: tempFolder
            }, (this.logger.isDebug ? this.logger : nullLogger));

            await this.fsUtil.copy(path.join(tempFolder, mvnCmdArgs.artifactId), this.projectPath);
        } catch (err) {
            if (err.code === 'ENOENT' && err.path === 'mvn') {
                throw new Error(`Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`);
            }
            throw err;
        } finally {
            await fse.remove(tempFolder);
        }
    }

    async finalize() {
        const relativeProjectPath = path.relative(this.cwd, this.projectPath);
        if (relativeProjectPath && relativeProjectPath !== '.') {
            this.logger.log(`Continue with 'cd ${relativeProjectPath}'`);
        }

        this.logger.log(`Learn about next steps at ${URLS.CAPIRE}`);
    }
}
