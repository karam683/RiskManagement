module.exports = ({ cwd, script, ext, ignore=RegExp(), env={}, delay=200, options={} })=>{

  let child

  // Phoning home...
  const EventEmitter = require('events')
  const emitter = new EventEmitter
  process.on('exit', () => {
    if (child)  child.kill()  // propagate exit to child
    emitter.emit('quit') // listener might exit(), so expect this to be the last statement here
  })

  // Re-starting child process...
  const { fork } = require('child_process')
  const restart = (evt, name)=>{
    const execArgv = []
    if (child) child.kill()
    if (evt && evt.startsWith('--')) execArgv.push(evt)
    if (name && name.startsWith('--')) execArgv.push(name)
    if (options.debug) execArgv.push('--inspect')
    if (options['debug-brk']) execArgv.push('--inspect-brk')
    const files = evt === "update" ? [ name ] : undefined
    emitter.emit ('restart', files)
    child = fork (script, { cwd, env, stdio:'inherit', execArgv }, (err)=>{
      if (err) console.error (err)
    })
    child.on('message', msg => emitter.emit('message', msg))
  }
  restart()

  // Watching for touched files...
  const watch = require('node-watch')
  const include = RegExp(`\\.(${ext.replace(/,/g,'|')})$`)
  const filter = f => !ignore.test(f) && include.test(f)
  watch (process.cwd(),{ recursive:true, filter, delay }, restart)

  // Live commands...
  const readline = require('readline')
  readline.createInterface(process.stdin).on('line', (input) => {
    if (input === '') restart()
    else if (input === 'restart' || input === 'rs' || input.match(/^y$/i)) restart()
    else if (input === 'debug' || input === 'dbg')  restart('--inspect')
    else if (input === 'break' || input === 'brk')  restart('--inspect-brk')
    else if (input === 'debug-brk')  restart('--inspect-brk')
    else if (input === 'ps') ps(child,env)
    else if (input === 'bye' || input.match(/^n$/i)) { child.kill(); process.exit() }
    else console.log ('?\n')
  })

  return emitter
}

const ps = (child,env) => console.log (`\x1b[32m
  PID     Process   Command
  ${process.pid}   parent    cds ${process.argv.slice(2).join(' ')}
  ${  child.pid}   child     cds ${JSON.parse(env._args).join(' ')}
  \x1b[0m`
)
