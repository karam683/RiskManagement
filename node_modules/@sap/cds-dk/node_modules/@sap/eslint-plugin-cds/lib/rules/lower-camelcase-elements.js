"use strict";
const ruleFactory_1 = require("../ruleFactory");
module.exports = ruleFactory_1.createRule({
    type: 'suggestion',
    docs: {
        description: `Regular element names should all be in lower camel case.`,
        category: 'Model Validation',
        version: '1.0.4'
    },
    messages: {
        'startLowercase': 'Start elements with a lowercase letter - for example, \'name\''
    },
    fixable: 'code'
}, (cds, context) => {
    const report = [];
    const filepath = context.getFilename();
    if (filepath.endsWith('.cds')) {
        const m = cds.reflect(cds.model);
        if (m) {
            m.forall((d) => {
                var _a;
                const entityName = d.name;
                for (const elementName in d.elements) {
                    const element = d.elements[elementName];
                    if (elementName && !(entityName.startsWith('localized') || entityName.endsWith('texts'))) {
                        if (elementName.charAt(0) !== elementName.charAt(0).toLowerCase() && !['ID'].includes(elementName)) {
                            const file = (_a = element === null || element === void 0 ? void 0 : element.$location) === null || _a === void 0 ? void 0 : _a.file;
                            const loc = cds.getLocation(elementName, element);
                            const sourcecode = context.getSourceCode();
                            const fix = (fixer) => {
                                const elementNameSanitized = elementName.charAt(0).toLowerCase() + elementName.slice(1);
                                const rangeEnd = sourcecode === null || sourcecode === void 0 ? void 0 : sourcecode.getIndexFromLoc({ line: loc.end.line, column: loc.end.column });
                                const rangeBeg = (rangeEnd) ? rangeEnd - elementNameSanitized.length : 0;
                                return fixer.replaceTextRange([rangeBeg, rangeEnd], elementNameSanitized);
                            };
                            const suggest = [
                                {
                                    messageId: 'startLowercase',
                                    fix
                                }
                            ];
                            report.push({ message: `Element '${elementName}' from entity '${entityName}' is not lower camel case!`, loc, suggest, file });
                        }
                    }
                }
            });
        }
    }
    return report;
});
//# sourceMappingURL=lower-camelcase-elements.js.map