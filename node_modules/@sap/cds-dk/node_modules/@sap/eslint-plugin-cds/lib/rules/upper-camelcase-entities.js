"use strict";
const ruleFactory_1 = require("../ruleFactory");
module.exports = ruleFactory_1.createRule({
    type: 'suggestion',
    docs: {
        description: `Entity names should all be in upper camel case.`,
        category: 'Model Validation',
        version: '1.0.4'
    },
    messages: {
        'startUppercase': 'Start entity and type names with capital letters'
    },
    fixable: 'code'
}, (cds, context) => {
    var _a;
    const report = [];
    const filepath = context.getFilename();
    if (filepath.endsWith('.cds')) {
        const m = cds.reflect(cds.model);
        if (m) {
            for (const entity of m.each('entity')) {
                let entityName = entity.name;
                const names = entityName.split('.');
                entityName = names[names.length - 1];
                if (entityName && !(entityName.startsWith('localized') || entityName.endsWith('texts'))) {
                    if (entityName.charAt(0) !== entityName.charAt(0).toUpperCase()) {
                        const file = (_a = entity === null || entity === void 0 ? void 0 : entity.$location) === null || _a === void 0 ? void 0 : _a.file;
                        const loc = cds.getLocation(entityName, entity);
                        const sourcecode = context.getSourceCode();
                        const fix = (fixer) => {
                            const entityNameSanitized = entityName.charAt(0).toUpperCase() + entityName.slice(1);
                            const rangeEnd = sourcecode === null || sourcecode === void 0 ? void 0 : sourcecode.getIndexFromLoc({ line: loc.end.line, column: loc.end.column });
                            const rangeBeg = (rangeEnd) ? rangeEnd - entityNameSanitized.length : 0;
                            return fixer.replaceTextRange([rangeBeg, rangeEnd], entityNameSanitized);
                        };
                        const suggest = [
                            {
                                messageId: 'startUppercase',
                                fix
                            }
                        ];
                        report.push({ message: `Entity '${entityName}' is not upper camel case!`, loc, file, suggest });
                    }
                }
            }
        }
    }
    return report;
});
//# sourceMappingURL=upper-camelcase-entities.js.map