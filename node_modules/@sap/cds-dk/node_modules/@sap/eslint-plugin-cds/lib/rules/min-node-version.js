"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const ruleFactory_1 = require("../ruleFactory");
const semver_1 = __importDefault(require("semver"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
module.exports = ruleFactory_1.createRule({
    type: 'problem',
    docs: {
        description: `Checks whether the minimum node version required by the <code>@sap/cds</code> is achieved.`,
        category: 'Environment',
        version: '1.0.0'
    },
}, (cds, context) => {
    var _a;
    const report = [];
    let nodeVersion, nodeVersionCDS;
    if (!cds.environment) {
        const jsonCDSFile = path_1.default.join(cds.home, 'package.json');
        if (fs_1.default.existsSync(jsonCDSFile)) {
            const jsonCDS = require(jsonCDSFile);
            nodeVersion = process.version;
            nodeVersionCDS = (_a = jsonCDS.engines) === null || _a === void 0 ? void 0 : _a.node;
        }
    }
    else {
        nodeVersion = cds.environment.nodeVersion;
        nodeVersionCDS = cds.environment.nodeVersionCDS;
    }
    if (nodeVersion && nodeVersionCDS && !semver_1.default.satisfies(nodeVersion, nodeVersionCDS, { loose: true })) {
        report.push({
            message: `CDS minimum node version of ${nodeVersionCDS} required, found ${nodeVersion}!`,
            loc: { line: 0, column: 0 },
            file: context.getFilename()
        });
    }
    return report;
});
//# sourceMappingURL=min-node-version.js.map