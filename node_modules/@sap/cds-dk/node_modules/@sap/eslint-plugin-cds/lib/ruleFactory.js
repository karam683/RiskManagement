"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuleTester = exports.createRule = void 0;
const path_1 = __importDefault(require("path"));
const eslint_1 = require("eslint");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
function createRule(defineMeta, defineReport) {
    return {
        meta: Object.assign({}, defineMeta),
        create(context) {
            {
                return cbRuleFunctions(context, defineReport);
            }
        }
    };
}
exports.createRule = createRule;
function cbRuleFunctions(context, defineReport) {
    return {
        Program(node) {
            var _a, _b, _c;
            const sourcecode = context.getSourceCode();
            const code = sourcecode.getText(node);
            const filepath = context.getFilename();
            const cds = context.parserServices.cdsProxy;
            if ((_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.environment) {
                utils_1.Cache.set('environment', context.options[0].environment);
            }
            utils_1.Cache.set(`file:${filepath}`, code);
            utils_1.getModel(code);
            if (((cds === null || cds === void 0 ? void 0 : cds.model) || (cds === null || cds === void 0 ? void 0 : cds.env)) && !((_b = cds === null || cds === void 0 ? void 0 : cds.model) === null || _b === void 0 ? void 0 : _b.err)) {
                let report = [];
                utils_1.Cache.remove('err');
                report = defineReport(cds, context, node);
                if (report) {
                    reportErrors(filepath, context, report);
                }
            }
            else {
                if ((_c = cds === null || cds === void 0 ? void 0 : cds.model) === null || _c === void 0 ? void 0 : _c.err) {
                    if (!utils_1.Cache.has('err')) {
                        utils_1.Cache.set('err', cds.model.err);
                        utils_1.printInStyle(`Error: ${cds.model.err}`, ['red', 'bold']);
                    }
                    else {
                        if (utils_1.Cache.get('err') !== cds.model.err) {
                            utils_1.printInStyle(`Error: ${cds.model.err}`, ['red', 'bold']);
                        }
                    }
                }
                else {
                }
            }
        }
    };
}
function reportErrors(filepath, context, report) {
    report.forEach((entry, i) => {
        if (entry) {
            const file = entry.file;
            if (constants_1.Constants.envRules.includes(context.id) ||
                ((file && (file.endsWith(filepath) || entry.file === '<stdin>.cds')))) {
                context.report(entry);
            }
        }
    });
}
function getRuleTester() {
    const resolvedPlugin = require.resolve('@sap/eslint-plugin-cds', { paths: [path_1.default.resolve("../..")] });
    return new eslint_1.RuleTester({
        parser: path_1.default.join(path_1.default.dirname(resolvedPlugin), 'parser')
    });
}
exports.getRuleTester = getRuleTester;
//# sourceMappingURL=ruleFactory.js.map