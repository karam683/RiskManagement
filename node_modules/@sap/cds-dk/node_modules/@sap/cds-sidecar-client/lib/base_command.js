const MTX_URL_PATH_PREFIX = 'mtx/v1/model/';
const CUSTOM_FILE_URL_SUFFIX = 'customTenantContent';

const path = require('path');
const fs = require('fs-extra');
const { URL } = require('url');
const clientLog = require('./helper/logging');

class BaseCommand {

    static get CUSTOM_FILE_URL_SUFFIX() { return CUSTOM_FILE_URL_SUFFIX; }

    static async checkProject(folder) {
        return fs.pathExists(path.join(folder, 'package.json'));
    }

    static async handleHttpError(error, options) {
        if (error.name === 'HTTPError') {
            const statusCode = error.response.statusCode;
            switch (statusCode) {
                case 401: {
                    clientLog.error('Request failed: authorization might have expired. Please retry with valid passcode' +
                        (options.passcodeUrl ? ` from ${options.passcodeUrl}` : ''), error);
                    return;
                }
                case 404:
                    clientLog.error(`Request failed. Please check application URL ${options.appUrl}`, error);
                    return;
            }
        }

        // Errors handled here include 422 (compilation or native-extension error).
        clientLog.error(undefined, error);
    }

    static concatUrls(base, ...paths) {
        function trimBeginSlash(str) {
            return str.replace(/^\//, '');
        }
        function trimEndSlash(str) {
            return str.replace(/\/$/, '');
        }
        function trimSlashes(str) {
            return trimBeginSlash(trimEndSlash(str));
        }
        const concatenated = new URL(base);
        concatenated.pathname = trimEndSlash(concatenated.pathname) + '/' +
            paths.map((p, i) => i < paths.length - 1 ? trimSlashes(p) : trimBeginSlash(p)).join('/');
        return concatenated.toString();
    }

    static getMtxApiUrl(url, action) {
        return BaseCommand.concatUrls(url, MTX_URL_PATH_PREFIX, action);
    }
}

module.exports = BaseCommand;
